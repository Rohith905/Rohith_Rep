package com.practice.scalaint
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._

object SCD3 {

  def main(args: Array[String]): Unit= {
    val spark = SparkSession
      .builder
      .appName ("SCD3Implementation")
      .master ("yarn")
      .enableHiveSupport()
      //.config("hive.exec.dynamic.partition", "true")
      //.config("hive.exec.dynamic.partition.mode", "nonstrict")
      .getOrCreate ()

    import spark.implicits._
    //val tgt = spark.read.option("Header",true).csv("EmpTgtHive.txt")
    val tgtrd=spark.sql("select * from scala.emptgtscd3")
    val srcrd=spark.sql("select * from scala.empsrcscd3")
    //val outI=spark.sql("select SrcDf.* from SrcDf Left Join TgtDfT on SrcDf.EmpNo=TgtDfT.EmpNo")
    //outI.show()
    //val outO=spark.sql("select TgtDft.* from SrcDf Inner Join TgtDfT on SrcDf.EmpNo=TgtDfT.EmpNo where TgtDft.Sal<> SrcDf.Sal")
    //outO.show()
    /*
	val outOI=outO.withColumn("EndDate",when($"Sal".isNotNull,current_date()))
      .withColumn("Ind",when($"Sal".isNotNull,"n"))
    outOI.show()
    println("Outdated records")
    outOI.write.insertInto("scala.emphivetgt")
	*/
    val joinrd=srcrd.join(tgtrd,srcrd.col("empno")===tgtrd.col("empno"),"Left")
      .select(srcrd.col("empno").alias("SrcEmpNo")
        ,srcrd.col("empname").alias("SrcEmpName")
        ,srcrd.col("Sal").alias("SrcSal")
        ,srcrd.col("deptno").alias("SrcDeptNo")
        ,tgtrd.col("empno").alias("TgtEmpNo")
        ,tgtrd.col("empname").alias("TgtEmpName")
        ,tgtrd.col("currentsal").alias("tgtcurrentsal")
        ,tgtrd.col("prevsal").alias("tgtprevsal")
        ,tgtrd.col("deptno").alias("TgtDeptNo")
        ,tgtrd.col("effectiveDate").alias("tgteffectivedate"))
    println("left join dataframe")
    joinrd.show()
    println("Identify new records from dataframe")
    val outNI=joinrd.filter("TgtEmpNo is Null")
      .withColumnRenamed("SrcEmpNo","empno")
      .withColumnRenamed("SrcEmpName","empname")
      .withColumnRenamed("SrcSal","currentsal")
      .withColumnRenamed("tgtprevsal","prevsal")
      .withColumnRenamed("SrcDeptNo","deptno")
      .withColumn("effectivedate",when($"TgtEmpNo".isNull,current_date()))
        .drop("TgtEmpNo")
        .drop("TgtDeptNo")
        .drop("TgtEmpName")
        .drop("tgtcurrentsal")
        .drop("tgteffectivedate")
    val outNI1=outNI.select("empno","empname","currentsal","prevsal","deptno","effectivedate")

    outNI1.show()
    println("Identify updated records from dataframe")
    val outUI=joinrd.filter("TgtEmpNo is Not Null").filter($"SrcSal"=!=$"tgtcurrentsal")
      .withColumnRenamed("SrcEmpNo","empno")
      .withColumnRenamed("SrcEmpName","empname")
      .withColumnRenamed("SrcSal","currentsal")
      .withColumnRenamed("tgtcurrentsal","prevsal")
      .withColumnRenamed("SrcDeptNo","deptno")
      .withColumn("effectivedate",when($"TgtEmpNo".isNotNull,current_date()))
        .drop("TgtEmpNo")
        .drop("TgtDeptNo")
        .drop("TgtEmpName")
        .drop("tgtprevsal")
        .drop("tgteffectivedate")
    val outUI1=outUI.select("empno","empname","currentsal","prevsal","deptno","effectivedate")
        outUI1.show()
    println("Identify same records from dataframe")
    val outSI=joinrd.filter("TgtEmpNo is Not Null").filter($"SrcSal"===$"tgtcurrentsal")
      .withColumnRenamed("SrcEmpNo","empno")
      .withColumnRenamed("SrcEmpName","empname")
      .withColumnRenamed("tgtcurrentsal","currentsal")
      .withColumnRenamed("tgtprevsal","prevsal")
      .withColumnRenamed("SrcDeptNo","deptno")
      .withColumnRenamed("tgteffectivedate","effectivedate")
      .drop("TgtEmpNo")
      .drop("TgtDeptNo")
      .drop("TgtEmpName")
      .drop("SrcSal")
    val outSI1=outSI.select("empno","empname","currentsal","prevsal","deptno","effectivedate")
    outSI1.show()
    println("Union records from dataframe")
    val FnlRd=outNI1.union(outUI1).union(outSI1).select("empno","empname","currentsal","prevsal","deptno","effectivedate")
    FnlRd.show()
    FnlRd.write.mode("overWrite").insertInto("scala.emptgtscd3")
  }
}
